import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
import pickle
import plotly.express as px


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Insurance Prediction App",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
uploaded_file = None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if 'df_input' not in st.session_state:
    st.session_state['df_input'] = pd.DataFrame()

if 'df_predicted' not in st.session_state:
    st.session_state['df_predicted'] = pd.DataFrame()

if 'tab_selected' not in st.session_state:
    st.session_state['tab_selected'] = None

def reset_session_state():
    st.session_state['df_input'] = pd.DataFrame()
    st.session_state['df_predicted'] = pd.DataFrame()

# logistic regression model
model_file_path = 'models/insurance_model.sav'
model = pickle.load(open(model_file_path, 'rb'))

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
@st.cache_data
def predict_churn(df_input):

    df_original = df_input.copy()

    df_original['sex'] = df_original['sex'].map({'male':1,'female':0})
    df_original['smoker'] = df_original['smoker'].map({'yes':1,'no':0})
    df_original['region'] = df_original['region'].map({'southwest':0,'southeast':1,'northwest':2,'northeast':3})

    y_pred = model.predict(df_original)
    df_original['charges'] = y_pred
    return df_original


@st.cache_data
def convert_df(df):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ csv
    return df.to_csv(index=False).encode('utf-8')

# Sidebar section start
# –°–∞–π–¥–±–∞—Ä –±–ª–æ–∫
with st.sidebar:
    st.title('üóÇ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
    
    tab1, tab2 = st.tabs(['üìÅ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞', 'üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'])
    with tab1:
        # –í–∫–ª–∞–¥–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 1)
        uploaded_file = st.file_uploader("–í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª", type=['csv', 'xlsx'], on_change=reset_session_state)
        if uploaded_file is not None:
            prediction_button = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button1')
            st.session_state['df_input'] = pd.read_csv(uploaded_file)
            if prediction_button:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_churn(st.session_state['df_input'])
                st.session_state['tab_selected'] = 'tab1'

    with tab2:
        # –í–∫–ª–∞–¥–∫–∞ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é, c –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 2)
        age = st.text_input('Age', placeholder='20', help='–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç')
        sex = st.selectbox( '–ü–æ–ª', ('female', 'male'))
        bmi = st.text_input('BMI', placeholder='20', help='–í–≤–µ–¥–∏—Ç–µ BMI')
        children_count = st.text_input('Children', placeholder='1', help='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–µ—Ç–µ–π')
        smoker = st.selectbox( '–ö—É—Ä–∏–ª—å—â–∏–∫', ('yes', 'no'))
        region = st.selectbox('–†–µ–≥–∏–æ–Ω', ('southwest', 'southeast', 'northwest', 'northeast'))
        
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –ø–æ—Ä–æ–≥–æ–º –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if age != '':
            prediction_button_tab2 = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button2')
            
            if prediction_button_tab2:
                st.session_state['tab_selected'] = 'tab2'
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session state –≤ –≤–∏–¥–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
                #age,sex,bmi,children,smoker,region
                st.session_state['df_input'] = pd.DataFrame({
                    'age': age,
                    'sex': sex,
                    'bmi': bmi,
                    'children': children_count,
                    'smoker': smoker,
                    'region': region,
                }, index=[0])
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_churn(st.session_state['df_input'])

                

# Sidebar section end

# Main section start
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
st.image('https://miro.medium.com/v2/resize:fit:720/format:webp/0*t-YEeLunFUQy12oa.png', width=400)
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏')

with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
    st.write("""–í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.
    –î–ª—è —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É.
    –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å—É–º–º—É —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –º–µ–¥ —É—Å–ª—É–≥.""")

# –í—ã–≤–æ–¥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
if len(st.session_state['df_input']) > 0:
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–µ–º –≤–∏–¥–µ
    if len(st.session_state['df_predicted']) == 0:
        st.subheader('–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞')
        st.write(st.session_state['df_input'])
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ expander
        with st.expander("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.write(st.session_state['df_input'])

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ 2)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab2':
    st.subheader(f'–°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏: ${round( st.session_state["df_predicted"]["charges"][0])}')

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª–∞–¥–∫–∞ 1)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab1':
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.write(st.session_state['df_predicted'])
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    res_all_csv = convert_df(st.session_state['df_predicted'])
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
        data=res_all_csv,
        file_name='df-churn-predicted-all.csv',
        mime='text/csv',
    )

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Ç–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    fig = px.histplot(st.session_state['df_predicted'].charges,bins=20, kde=True,color='red')

    st.plotly_chart(fig, use_container_width=True)

    # –ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
    predicted_charges = st.session_state['df_predicted']
    # –í—ã–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
    if len(predicted_charges) > 0:
        st.subheader('–ö–ª–∏–µ–Ω—Ç—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏')
        st.write(predicted_charges)
        # –°–∫–∞—á–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
        predicted_charges_csv = convert_df(predicted_charges)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏",
            data=predicted_charges_csv,
            file_name='df-predicted-charges.csv',
            mime='text/csv',
        )